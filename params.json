{
  "name": "Couchdb-promises",
  "tagline": "Yet another Node module for CouchDB that uses ES6 promises. No dependencies.",
  "body": "\r\n[![JavaScript Style Guide](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](http://standardjs.com/)\r\n[![Build Status](https://travis-ci.org/pmorjan/couchdb-promises.svg?branch=master)](https://travis-ci.org/pmorjan/couchdb-promises)\r\n[![NPM Version](https://img.shields.io/npm/v/couchdb-promises.svg)](https://www.npmjs.com/package/couchdb-promises)\r\n\r\n# couchdb-promises\r\n\r\n### Yet another Node.js module for CouchDB that uses ES6 promises\r\n\r\n*   **no dependencies**\r\n*   **as simple as possible**\r\n\r\nAll Functions return a **Promise object** whose fulfillment or failure handler receives an object of **5** properties:\r\n*   **headers**: {Object} - HTTP response headers from CouchDB\r\n*   **data**: {Object} - CouchDB response body\r\n*   **status**: {Number} - HTTP status code from CouchDB\r\n*   **message**: {String} - description of the status code from CouchDB API\r\n*   **duration**: {Number} - execution time in milliseconds\r\n\r\nThe promise is resolved if the **status** code is **< 400** otherwise rejected.\r\n\r\n### Installation\r\n```\r\nnpm install couchdb-promises\r\n```\r\n\r\n### [Example.js](examples/example.js)\r\n\r\n```javascript\r\nconst db = require('couchdb-promises')\r\nconst baseUrl = 'http://localhost:5984'  // https://[user:password@]server[:port]\r\nconst dbName = 'testdb'\r\n```\r\n\r\n#### get info\r\n```javascript\r\ndb.getInfo(baseUrl)\r\n.then(console.log)\r\n// { headers: { ... },\r\n//   data:\r\n//    { couchdb: 'Welcome',\r\n//      version: '2.0.0',\r\n//      vendor: { name: 'The Apache Software Foundation' } },\r\n//   status: 200,\r\n//   message: 'OK - Request completed successfully'\r\n//   duration: 36 }\r\n```\r\n\r\n#### create database\r\n```javascript\r\ndb.createDatabase(baseUrl, dbName)\r\n.then(console.log)\r\n// { headers: { ... },\r\n//   data: { ok: true },\r\n//   status: 201,\r\n//   message: 'Created - Database created successfully',\r\n//   duration: 131 }\r\n```\r\n\r\n#### get database head\r\n```javascript\r\n.then(() => db.getDatabaseHead(baseUrl, dbName))\r\n.then(console.log)\r\n// { headers: { ... },\r\n//   data: {},\r\n//   status: 200,\r\n//   message: 'OK - Database exists',\r\n//   duration: 4 }\r\n```\r\n\r\n#### list databases\r\n```javascript\r\n.then(() => db.listDatabases(baseUrl))\r\n.then(console.log)\r\n// { headers: { ... },\r\n//   data: [ '_replicator', '_users', 'testdb' ],\r\n//   status: 200,\r\n//   message: 'OK - Request completed successfully',\r\n//   duration: 4 }\r\n```\r\n\r\n#### create document\r\n```javascript\r\n.then(() => db.createDocument(baseUrl, dbName, {name: 'Bob'}))\r\n.then(console.log)\r\n// { headers: { ... },\r\n//   data:\r\n//    { ok: true,\r\n//      id: 'daae0752c6909d7ca4cd833f46014605',\r\n//      rev: '1-5a26fa4b20e40bc9e2d3e47b168be460' },\r\n//   status: 201,\r\n//   message: 'Created – Document created and stored on disk',\r\n//   duration: 42 }\r\n```\r\n\r\n#### create document by id\r\n```javascript\r\n.then(() => db.createDocument(baseUrl, dbName, {name: 'Alice'}, 'doc2'))\r\n.then(console.log)\r\n// { headers: { ... },\r\n//   data:\r\n//    { ok: true,\r\n//      id: 'doc2',\r\n//      rev: '1-88b10f13383b5d1e34d1d66d296f061f' },\r\n//   status: 201,\r\n//   message: 'Created – Document created and stored on disk',\r\n//   duration: 38 }\r\n```\r\n\r\n#### get document head\r\n```javascript\r\n.then(() => db.getDocumentHead(baseUrl, dbName, 'doc2'))\r\n.then(console.log)\r\n// { 'cache-control': 'must-revalidate',\r\n//   connection: 'close',\r\n//   'content-length': '74',\r\n//   'content-type': 'application/json',\r\n//   date: 'Sun, 06 Nov 2016 08:56:47 GMT',\r\n//   etag: '\"1-88b10f13383b5d1e34d1d66d296f061f\"',\r\n//   server: 'CouchDB/2.0.0 (Erlang OTP/17)',\r\n//   'x-couch-request-id': '041e46071b',\r\n//   'x-couchdb-body-time': '0' },\r\n//   data: {},\r\n//   status: 200,\r\n//   message: 'OK - Document exists',\r\n//   duration: 6 }\r\n```\r\n\r\n#### get document\r\n```javascript\r\n.then(() => db.getDocument(baseUrl, dbName, 'doc2'))\r\n.then(response => { console.log(response); return response.data })\r\n// { headers: { ... },\r\n//   data:\r\n//    { _id: 'doc2',\r\n//      _rev: '1-88b10f13383b5d1e34d1d66d296f061f',\r\n//      name: 'Alice' },\r\n//   status: 200,\r\n//   message: 'OK - Request completed successfully',\r\n//   duration: 11 }\r\n```\r\n\r\n#### update document\r\n```javascript\r\n.then((doc) => {\r\n  doc.age = 42\r\n  return db.createDocument(baseUrl, dbName, doc, 'doc2')\r\n})\r\n.then(console.log)\r\n// { headers: { ... },\r\n//   data:\r\n//    { ok: true,\r\n//      id: 'doc2',\r\n//      rev: '2-ee5ea9ac0bb1bec913a9b5e7bc11b113' },\r\n//   status: 201,\r\n//   message: 'Created – Document created and stored on disk',\r\n//   duration: 36 }\r\n```\r\n\r\n#### get all documents\r\n```javascript\r\n.then(() => db.getAllDocuments(baseUrl, dbName, {\r\n  descending: true,\r\n  include_docs: true\r\n}))\r\n.then(console.log)\r\n// { headers: { ... },\r\n//   data: { total_rows: 2, offset: 0, rows: [ [Object], [Object] ] },\r\n//   status: 200,\r\n//   message: 'OK - Request completed successfully',\r\n//   duration: 9 }\r\n```\r\n\r\n#### delete document\r\n```javascript\r\n.then(() => db.deleteDocument(baseUrl, dbName, 'doc2', '2-ee5ea9ac0bb1bec913a9b5e7bc11b113'))\r\n.then(console.log)\r\n// { headers: { ... },\r\n//   data:\r\n//    { ok: true,\r\n//      id: 'doc2',\r\n//      rev: '3-ec0a86a95c5e98a5cd52c29b79b66372' },\r\n//   status: 200,\r\n//   message: 'OK - Document successfully removed',\r\n//   duration: 39 }\r\n```\r\n\r\n#### bulk create documents\r\n```javascript\r\n.then(() => db.createBulkDocuments(baseUrl, dbName, [\r\n  {name: 'Tick'}, {name: 'Trick'}, {name: 'Track'}\r\n], {all_or_nothing: true}))\r\n.then(console.log)\r\n// { headers: { ... },\r\n//   data:\r\n//   [ { ok: true,\r\n//       id: '5413cf41edaedaec6b63aee93db86e1f',\r\n//       rev: '1-d7f23e94e65978ea9252d753fe5dc3f6' },\r\n//     { ok: true,\r\n//       id: '5413cf41edaedaec6b63aee93db877cc',\r\n//       rev: '1-646cd5f84634632f42fee2bdf4ff753a' },\r\n//     { ok: true,\r\n//       id: '5413cf41edaedaec6b63aee93db87c3d',\r\n//       rev: '1-9cc8cf1e775b686ca337f69cd39ff772' } ],\r\n//   status: 201,\r\n//   message: 'Created – Document(s) have been created or updated',\r\n//   duration: 74 }\r\n```\r\n\r\n#### find documents (requires CouchDB >= 2.0.0)\r\n```javascript\r\n.then(() => db.findDocuments(baseUrl, dbName, {\r\n  selector: {\r\n    $or: [{ name: 'Tick' }, {name: 'Track'}]\r\n  },\r\n  fields: ['_id', 'name']\r\n}))\r\n.then(console.log)\r\n// { headers: { ... },\r\n//   data:\r\n//    { warning: 'no matching index found, create an index to optimize query time',\r\n//      docs: [ [Object], [Object] ] },\r\n//   status: 200,\r\n//   message: 'OK - Request completed successfully',\r\n//   duration: 14 }\r\n```\r\n\r\n#### get uuids\r\n```javascript\r\n.then(() => db.getUuids(baseUrl, 3))\r\n.then(console.log)\r\n// { headers: { ... },\r\n//   data:\r\n//    { uuids:\r\n//       [ 'daae0752c6909d7ca4cd833f46014c47',\r\n//         'daae0752c6909d7ca4cd833f460150c5',\r\n//         'daae0752c6909d7ca4cd833f460156c5' ] },\r\n//   status: 200,\r\n//   message: 'OK - Request completed successfully',\r\n//   duration: 4 }\r\n```\r\n\r\n#### delete database\r\n```javascript\r\n.then(() => db.deleteDatabase(baseUrl, dbName))\r\n.then(console.log)\r\n// { headers: { ... },\r\n//   data: { ok: true },\r\n//   status: 200,\r\n//   message: 'OK - Database removed successfully' }\r\n//   duration: 40 }\r\n```\r\n\r\n#### on error\r\n```javascript\r\n.then(() => db.getDocument(baseUrl, dbName, 'doc1'))\r\n.catch(console.error)\r\n// { headers: { ... },\r\n//   data: { error: 'not_found', reason: 'Database does not exist.' },\r\n//   status: 404,\r\n//   message: 'Not Found - Document not found',\r\n//   duration: 5 }\r\n```\r\n\r\n---\r\n\r\n### View and Design Functions ([View.js](examples/view.js))\r\n\r\n#### create design document\r\n```javascript\r\nconst ddoc = {\r\n  language: 'javascript',\r\n  views: { view1: { map: 'function (doc) {emit(doc.name, doc.number)}' } }\r\n}\r\nconst docId = 'ddoc1'\r\n\r\ndb.createDesignDocument(baseUrl, dbName, ddoc, docId)\r\n.then(console.log)\r\n// { headers: { ... },\r\n//   data:\r\n//    { ok: true,\r\n//      id: '_design/ddoc1',\r\n//      rev: '1-548c68d8cc2c1fac99964990a58f66fd' },\r\n//   status: 201,\r\n//   message: 'Created – Document created and stored on disk',\r\n//   duration: 271 }\r\n```\r\n\r\n#### get design document\r\n```javascript\r\ndb.getDesignDocument(baseUrl, dbName, docId)\r\n.then(console.log)\r\n// { headers: { ... },\r\n//   data:\r\n//    { _id: '_design/ddoc1',\r\n//      _rev: '1-548c68d8cc2c1fac99964990a58f66fd',\r\n//      language: 'javascript',\r\n//      views: { view1: [Object] } },\r\n//   status: 200,\r\n//   message: 'OK - Request completed successfully',\r\n//   duration: 5 }\r\n```\r\n\r\n#### get design document info\r\n```javascript\r\ndb.getDesignDocumentInfo(baseUrl, dbName, docId)\r\n.then(console.log)\r\n// { headers: { ... },\r\n//   data:\r\n//   { name: 'ddoc1',\r\n//     view_index:\r\n//      { updates_pending: [Object],\r\n//        waiting_commit: false,\r\n//        waiting_clients: 0,\r\n//        updater_running: false,\r\n//        update_seq: 0,\r\n//        sizes: [Object],\r\n//        signature: '1e86d92af43c47ef58da4b645dbd47f1',\r\n//        purge_seq: 0,\r\n//        language: 'javascript',\r\n//        disk_size: 408,\r\n//        data_size: 0,\r\n//        compact_running: false } },\r\n//   status: 200,\r\n//   message: 'OK - Request completed successfully',\r\n//   duration: 54 }\r\n```\r\n\r\n#### get view\r\n```javascript\r\ndb.getView(baseUrl, dbName, docId, viewName, {limit: 3})\r\n.then(console.log)\r\n// { headers: { ... },\r\n//   data:\r\n//    { total_rows: 12,\r\n//      offset: 0,\r\n//      rows: [ [Object], [Object], [Object] ] },\r\n//   status: 200,\r\n//   message: 'OK - Request completed successfully',\r\n//   duration: 834 }\r\n```\r\n\r\n#### delete design document\r\n```javascript\r\ndb.deleteDesignDocument(baseUrl, dbName, docId, rev)\r\n.then(console.log)\r\n// { headers: { ... },\r\n//   data:\r\n//    { ok: true,\r\n//      id: '_design/ddoc1',\r\n//      rev: '2-fd68157ec3c1915ebe0b248343292d34' },\r\n//   status: 200,\r\n//   message: 'OK - Document successfully removed',\r\n//   duration: 49 }\r\n```\r\n---\r\n\r\n### Index Functions (CouchDB >= 2.0)\r\n\r\n### create index\r\n```javascript\r\ndb.createIndex(baseUrl, dbName, {\r\n  index: {\r\n    fields: ['foo']\r\n  },\r\n  name: 'foo-index'\r\n})\r\n.then(console.log)\r\n// { headers: { ... },\r\n//   data:\r\n//    { result: 'exists',\r\n//      id: '_design/a5f4711fc9448864a13c81dc71e660b524d7410c',\r\n//      name: 'foo-index' },\r\n//   status: 200,\r\n//   message: 'OK - Index created successfully or already exists',\r\n//   duration: 14 }\r\n```\r\n\r\n### get index\r\n```javascript\r\ndb.getIndex(baseUrl, dbName)\r\n.then(console.log)\r\n// { headers: { ... },\r\n//   data: { total_rows: 2, indexes: [ [Object], [Object] ] },\r\n//   status: 200,\r\n//   message: 'OK - Success',\r\n//   duration: 6 }\r\n```\r\n\r\n### delete index\r\n```javascript\r\ndb.getIndex(baseUrl, dbName)\r\n.then(response => {\r\n  const docId = response.data.indexes.find(e => e.name === 'foo-index').ddoc\r\n  return db.deleteIndex(baseUrl, dbName, docId, 'foo-index')\r\n})\r\n.then(console.log)\r\n// { headers: { ... },\r\n//  data: { ok: true },\r\n//  status: 200,\r\n//  message: 'OK - Success',\r\n//  duration: 45 }\r\n```\r\n\r\n---\r\n#### get request timeout\r\n```javascript\r\ndb.getTimeout()\r\n// -> 10000  (returns Number)\r\n```\r\n\r\n#### set request timeout\r\n```javascript\r\ndb.setTimeout(3000)\r\n// -> 3000  (returns Number)\r\n```\r\n\r\n---\r\n\r\n# API Reference\r\n\r\nSee [examples](examples/) for details.\r\n\r\n### database functions\r\n*   createDatabase()\r\n*   deleteDatabase()\r\n*   findDocuments()\r\n*   getDatabase()\r\n*   getDatabaseHead()\r\n*   listDatabases()\r\n\r\n### document functions\r\n*   getAllDocuments()\r\n*   createDocument()\r\n*   deleteDocument()\r\n*   getDocument()\r\n*   getDocumentHead()\r\n\r\n### index functions (CouchDB >= 2.0)\r\n*   createIndex()\r\n*   getIndex()\r\n*   deleteIndex()\r\n\r\n### document attachment functions\r\n*   getAttachment()\r\n*   getAttachmentHead()\r\n*   addAttachment()\r\n*   deleteAttachment()\r\n\r\n### view and design document functions\r\n*   createDesignDocument()\r\n*   deleteDesignDocument()\r\n*   getDesignDocument()\r\n*   getDesignDocumentInfo()\r\n*   getView()\r\n\r\n### bulk document functions\r\n*   createBulkDocuments()\r\n\r\n### miscellaneous functions\r\n*   setTimeout()\r\n*   getTimeout()\r\n*   getInfo()\r\n*   getUuids()\r\n\r\n### aliases for backward compatibility\r\n*   bulkDocs() -> createBulkDocuments()\r\n*   getAllDocs() -> getAllDocuments()\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}